pipeline {
  agent any
  environment {
    IMAGE_NAME = 'flask-shopping-list'  // change if you like
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build') {
      steps {
        // optional diagnostics
        bat 'where docker'
        bat 'docker --version'

        // Compute COMMIT + IMAGE_TAG, then build and save artefact
        bat '''
          setlocal ENABLEDELAYEDEXPANSION
          for /f %%i in ('git rev-parse --short HEAD') do set COMMIT=%%i
          set IMAGE_TAG=%BUILD_NUMBER%-%COMMIT%

          if not exist build mkdir build

          docker build -t %IMAGE_NAME%:%IMAGE_TAG% .

          docker images --no-trunc --quiet %IMAGE_NAME%:%IMAGE_TAG% > build\\image-id.txt
          echo %IMAGE_NAME%:%IMAGE_TAG% > build\\image-tag.txt

          docker save -o build\\%IMAGE_NAME%-%IMAGE_TAG%.tar %IMAGE_NAME%:%IMAGE_TAG%
        '''
      }
    }
stage('Test - Unit') {
  steps {
    bat '''
      setlocal ENABLEDELAYEDEXPANSION
      for /f %%i in ('git rev-parse --short HEAD') do set COMMIT=%%i
      set IMAGE_NAME=flask-shopping-list
      set IMAGE_TAG=%BUILD_NUMBER%-%COMMIT%

      if exist reports rmdir /s /q reports
      mkdir reports\\junit

      docker run --rm ^
        -e CI_IN_CONTAINER=1 ^
        -e PYTHONPATH=/app ^
        -v "%cd%\\tests":/tests ^
        -v "%cd%\\reports":/tests/reports ^
        -w /tests ^
        %IMAGE_NAME%:%IMAGE_TAG% ^
        sh -lc "pip install -q pytest pytest-cov && \
                pytest -q --color=no \
                  --maxfail=1 --disable-warnings \
                  --cov=app --cov-report=term:skip-covered \
                  --cov-report=xml:/tests/reports/coverage.xml \
                  --cov-fail-under=85 \
                  --junitxml=/tests/reports/junit/pytest-unit.xml"
    '''
  }
  post {
    always {
      junit 'reports/junit/pytest-unit.xml'
      archiveArtifacts artifacts: 'reports/**', fingerprint: true
    }
  }
}


stage('Test - Smoke') {
  steps {
    bat '''
      setlocal ENABLEDELAYEDEXPANSION
      for /f %%i in ('git rev-parse --short HEAD') do set COMMIT=%%i
      set IMAGE_NAME=flask-shopping-list
      set IMAGE_TAG=%BUILD_NUMBER%-%COMMIT%
      set PORT=5001

      docker rm -f sl_test 2>nul || echo ok
      docker run -d --name sl_test -p %PORT%:5000 %IMAGE_NAME%:%IMAGE_TAG%

      powershell -Command "$ErrorActionPreference='Stop'; \
        $ok=$false; for($i=0;$i -lt 30;$i++){ \
          try{ $r=Invoke-WebRequest http://localhost:%PORT%/health -UseBasicParsing; if($r.StatusCode -eq 200){ $ok=$true; break } } \
          catch { Start-Sleep -s 2 } \
        }; if(-not $ok){ Write-Error 'App did not become healthy in time'; exit 1 }; \
        $l=Invoke-WebRequest http://localhost:%PORT%/login -UseBasicParsing; \
        if($l.StatusCode -ne 200){ Write-Error 'Login page not OK'; exit 1 }"
      docker rm -f sl_test
    '''
  }
  post {
    failure {
      bat 'echo --- sl_test logs --- & docker logs sl_test || echo (no container) & docker rm -f sl_test || exit /b 0'
    }
  }
}
stage('Code Quality') {
  steps {
    script {
      // Resolve the installed scanner
      def scannerHome = tool name: 'HD', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

      // Inject SONAR_HOST_URL and SONAR_TOKEN from the "HD" server config
      withSonarQubeEnv('HD') {
        // Run the scanner (properties file + a few CLI overrides)
        bat """
          "${scannerHome}\\bin\\sonar-scanner.bat" ^
            -Dsonar.projectVersion=%BUILD_NUMBER% ^
            -Dsonar.host.url=%SONAR_HOST_URL%
        """
      }
    }
  }
}

stage('Security') {
  environment {
    IMAGE_FULL = "${IMAGE_NAME}:${IMAGE_TAG}"
  }
  steps {
    script {
      // Make sure reports dirs exist
      bat '''
        if not exist reports mkdir reports
        if not exist reports\\junit mkdir reports\\junit
      '''

      // --- Run pip-audit (dependency vulns) + Bandit (SAST) inside a Python container
      // We keep exit codes non-fatal here; we gate below.
      bat '''
        docker run --rm -v "%cd%":/work -w /work python:3.11-slim sh -lc "
          pip install --no-cache-dir pip-audit bandit >/dev/null 2>&1 && \
          pip-audit -r requirements.txt -f json -o reports/pip-audit.json || true && \
          bandit -r app -iii -q -f junit -o reports/junit/bandit.xml || true
        "
      '''

      // --- Scan the built image with Trivy
      // Save a human-readable summary + a SARIF you could upload later if you want.
      // We do one run to write reports, then a small gate run to control build result.
      bat '''
        docker run --rm ^
          -v /var/run/docker.sock:/var/run/docker.sock ^
          -v "%cd%\\reports":/reports ^
          aquasec/trivy:0.53.0 image %IMAGE_FULL% ^
            --ignore-unfixed ^
            --scanners vuln ^
            --severity HIGH,CRITICAL ^
            --format table --output /reports/trivy-image.txt ^
            --format sarif --output /reports/trivy-image.sarif || true
      '''

      // --- Gates:
      // Fail build on CRITICAL image vulns
      catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        bat '''
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.53.0 ^
            image %IMAGE_FULL% --ignore-unfixed --scanners vuln --severity CRITICAL --quiet --exit-code 1
        '''
      }

      // Mark UNSTABLE if Bandit JUnit shows failures or Trivy finds HIGH vulns
      // (Trivy: exit 0 but we detect high via exit-code 1 to flip UNSTABLE without failing)
      catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
        bat '''
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.53.0 ^
            image %IMAGE_FULL% --ignore-unfixed --scanners vuln --severity HIGH --quiet --exit-code 1
        '''
      }
    }

    // Publish Bandit findings into “Tests” so you see a trend
    junit testResults: 'reports/junit/bandit.xml', allowEmptyResults: true

    // Always keep the security artifacts
    archiveArtifacts artifacts: 'reports/**', fingerprint: true, onlyIfSuccessful: false
  }
}


    stage('Archive artefacts') {
      steps {
        archiveArtifacts artifacts: 'build/**', fingerprint: true
      }
    }
  }
}
