pipeline {
  agent any
  environment {
    IMAGE_NAME = 'flask-shopping-list'  // change if you like
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }




    stage('Build') {
      steps {
        // optional diagnostics
        bat 'where docker'
        bat 'docker --version'

        // Compute COMMIT + IMAGE_TAG, then build and save artefact
        bat '''
          setlocal ENABLEDELAYEDEXPANSION
          for /f %%i in ('git rev-parse --short HEAD') do set COMMIT=%%i
          set IMAGE_TAG=%BUILD_NUMBER%-%COMMIT%

          if not exist build mkdir build

          docker build -t %IMAGE_NAME%:%IMAGE_TAG% .

          docker images --no-trunc --quiet %IMAGE_NAME%:%IMAGE_TAG% > build\\image-id.txt
          echo %IMAGE_NAME%:%IMAGE_TAG% > build\\image-tag.txt

          docker save -o build\\%IMAGE_NAME%-%IMAGE_TAG%.tar %IMAGE_NAME%:%IMAGE_TAG%
        '''
      }
    }




stage('Test - Unit') {
  steps {
    bat '''
      setlocal ENABLEDELAYEDEXPANSION
      for /f %%i in ('git rev-parse --short HEAD') do set COMMIT=%%i
      set IMAGE_NAME=flask-shopping-list
      set IMAGE_TAG=%BUILD_NUMBER%-%COMMIT%

      if exist reports rmdir /s /q reports
      mkdir reports\\junit

      docker run --rm ^
        -e CI_IN_CONTAINER=1 ^
        -e PYTHONPATH=/app ^
        -v "%cd%\\tests":/tests ^
        -v "%cd%\\reports":/tests/reports ^
        -w /tests ^
        %IMAGE_NAME%:%IMAGE_TAG% ^
        sh -lc "pip install -q pytest pytest-cov && \
                pytest -q --color=no \
                  --maxfail=1 --disable-warnings \
                  --cov=app --cov-report=term:skip-covered \
                  --cov-report=xml:/tests/reports/coverage.xml \
                  --cov-fail-under=85 \
                  --junitxml=/tests/reports/junit/pytest-unit.xml"
    '''
  }
  post {
    always {
      junit 'reports/junit/pytest-unit.xml'
      archiveArtifacts artifacts: 'reports/**', fingerprint: true
    }
  }
}



stage('Test - Smoke') {
  steps {
    bat '''
      setlocal ENABLEDELAYEDEXPANSION
      for /f %%i in ('git rev-parse --short HEAD') do set COMMIT=%%i
      set IMAGE_NAME=flask-shopping-list
      set IMAGE_TAG=%BUILD_NUMBER%-%COMMIT%
      set PORT=5001

      docker rm -f sl_test 2>nul || echo ok
      docker run -d --name sl_test -p %PORT%:5000 %IMAGE_NAME%:%IMAGE_TAG%

      powershell -Command "$ErrorActionPreference='Stop'; \
        $ok=$false; for($i=0;$i -lt 30;$i++){ \
          try{ $r=Invoke-WebRequest http://localhost:%PORT%/health -UseBasicParsing; if($r.StatusCode -eq 200){ $ok=$true; break } } \
          catch { Start-Sleep -s 2 } \
        }; if(-not $ok){ Write-Error 'App did not become healthy in time'; exit 1 }; \
        $l=Invoke-WebRequest http://localhost:%PORT%/login -UseBasicParsing; \
        if($l.StatusCode -ne 200){ Write-Error 'Login page not OK'; exit 1 }"
      docker rm -f sl_test
    '''
  }
  post {
    failure {
      bat 'echo --- sl_test logs --- & docker logs sl_test || echo (no container) & docker rm -f sl_test || exit /b 0'
    }
  }
}



stage('Code Quality') {
  steps {
    script {
      // Resolve the installed scanner
      def scannerHome = tool name: 'HD', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

      // Inject SONAR_HOST_URL and SONAR_TOKEN from the "HD" server config
      withSonarQubeEnv('HD') {
        // Run the scanner (properties file + a few CLI overrides)
        bat """
          "${scannerHome}\\bin\\sonar-scanner.bat" ^
            -Dsonar.projectVersion=%BUILD_NUMBER% ^
            -Dsonar.host.url=%SONAR_HOST_URL%
        """
      }
    }
  }
}




stage('Security') {
  steps {
    withEnv(["PYTHONWARNINGS=ignore"]) {
      script {
        bat """
        if not exist reports mkdir reports
        if not exist reports\\junit mkdir reports\\junit

        docker run --rm -v "%cd%":/work -w /work python:3.11-slim sh -lc "pip install --no-cache-dir pip-audit bandit >/dev/null 2>&1; \
          pip-audit -r requirements.txt -f json -o reports/pip-audit.json || true; \
          bandit -r app -iii -q -f xml -o reports/bandit.xml || true"

        rem -- read image tag saved in the Build stage
        set /p IMG=<build\\image-tag.txt

        rem -- Trivy table report
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "%cd%\\reports":/reports aquasec/trivy:0.53.0 ^
          image %IMG% --ignore-unfixed --scanners vuln --severity HIGH,CRITICAL ^
          --format table --output /reports/trivy-image.txt || exit /b 0

        rem -- Trivy SARIF (for Warnings NG / SARIF)
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "%cd%\\reports":/reports aquasec/trivy:0.53.0 ^
          image %IMG% --ignore-unfixed --scanners vuln --severity HIGH,CRITICAL ^
          --format sarif --output /reports/trivy-image.sarif || exit /b 0
        """
      }
    }

    // Optional publishers (won’t fail the build if missing)
    recordIssues enabledForFailure: true, tools: [sarif(pattern: 'reports/trivy-image.sarif')]
    archiveArtifacts artifacts: 'reports/**', fingerprint: true
  }
}




stage('Deploy - Staging') {
  // keep your when{} guard if you want; removing it makes this always run
  steps {
    script {
      bat '''
        setlocal ENABLEDELAYEDEXPANSION

        rem --- prep folders & files ---
        if not exist deploy mkdir deploy
        if not exist reports mkdir reports
        copy /Y docker-compose.staging.yml deploy\\docker-compose.staging.yml >NUL
        copy /Y staging.env                 deploy\\staging.env >NUL

        rem --- read image tag written in Build stage (e.g. "flask-shopping-list:46-abc1234") ---
        for /f %%i in (build\\image-tag.txt) do set "IMAGE=%%i"
        echo Using image: !IMAGE!

        rem --- stop previous stack (ignore errors if nothing is up) ---
        pushd deploy
        docker compose -p sl_staging -f docker-compose.staging.yml down --remove-orphans || echo ok

        rem --- export IMAGE so ${IMAGE} in compose gets resolved ---
        set "IMAGE=!IMAGE!"
        docker compose -p sl_staging -f docker-compose.staging.yml up -d --remove-orphans
        popd
      '''

      // Health check (PowerShell, no caret escaping needed)
      powershell '''
$ErrorActionPreference = "Stop"
$ok = $false
for ($i = 0; $i -lt 60; $i++) {
  try {
    $r = Invoke-WebRequest "http://localhost:5002/health" -UseBasicParsing
    if ($r.StatusCode -eq 200) { $ok = $true; break }
  } catch { Start-Sleep -Seconds 2 }
}
if (-not $ok) { throw "Staging app did not become healthy in time" }
'''
    }
  }
  post {
    success {
      echo 'Staging deployed & healthy at http://localhost:5002'
    }
    failure {
      bat 'if not exist reports mkdir reports'
      bat 'docker compose -p sl_staging -f deploy\\docker-compose.staging.yml ps   > reports\\deploy-ps.txt   || echo ok'
      bat 'docker compose -p sl_staging -f deploy\\docker-compose.staging.yml logs > reports\\deploy-logs.txt || echo ok'
      archiveArtifacts artifacts: 'reports/deploy-*.txt', fingerprint: true
    }
  }
}



stage('Release - Production') {
  // keep/remove a branch guard if you want; here we allow manual promotion from any branch
  steps {
    script {
      // Manual approval
      input message: "Promote build ${env.BUILD_NUMBER} to PRODUCTION?", ok: 'Deploy'

      // Tag + deploy with Docker Compose
      bat '''
        setlocal ENABLEDELAYEDEXPANSION

        rem --- prepare folders ---
        if not exist deploy mkdir deploy
        if not exist reports mkdir reports
        copy /Y docker-compose.production.yml deploy\\docker-compose.production.yml >NUL

        rem --- read the image that was built in the Build stage ---
        for /f %%i in (build\\image-tag.txt) do set "IMAGE=%%i"
        echo Releasing image: !IMAGE!

        rem --- tag for prod and latest (local) ---
        for /f "tokens=1 delims=:" %%a in ("!IMAGE!") do set "IMGNAME=%%a"
        for /f "tokens=2 delims=:" %%a in ("!IMAGE!") do set "IMGTAG=%%a"
        set "PROD_TAG=!IMGNAME!:prod-%BUILD_NUMBER%"
        set "LATEST_TAG=!IMGNAME!:latest"

        docker tag "!IMAGE!" "!PROD_TAG!"
        docker tag "!IMAGE!" "!LATEST_TAG!"

        rem --- keep a backup of last-good for rollback ---
        if exist build\\prod-last-good.txt copy /Y build\\prod-last-good.txt build\\prod-last-good.prev >NUL 2>&1
        echo !PROD_TAG! > build\\prod-candidate.txt

        rem --- deploy prod stack ---
        pushd deploy
        docker compose -p sl_prod -f docker-compose.production.yml down --remove-orphans || echo ok

        rem --- export IMAGE for compose substitution ---
        set "IMAGE=!PROD_TAG!"
        docker compose -p sl_prod -f docker-compose.production.yml up -d --remove-orphans
        popd
      '''

      // Health gate (run as real PowerShell, no caret/quoting headaches)
      powershell '''
$ErrorActionPreference = "Stop"
$ok = $false
for ($i = 0; $i -lt 90; $i++) {
  try {
    $r = Invoke-WebRequest "http://localhost:5003/health" -UseBasicParsing
    if ($r.StatusCode -eq 200) { $ok = $true; break }
  } catch {
    Start-Sleep -Seconds 2
  }
}
if (-not $ok) {
  Write-Error "PROD app did not become healthy in time"
  exit 1
}
'''

      // mark this image as last-good only after health passes
      bat '''
        copy /Y build\\prod-candidate.txt build\\prod-last-good.txt >NUL
        echo Production release healthy.
      '''
    }
  }
  post {
    success {
      echo " Production deployed & healthy at http://localhost:5003"
    }
    failure {
      echo ' Production deploy failed – attempting rollback...'

      // Diagnostics (ensure IMAGE is set so compose parses)
      bat '''
        if not exist reports mkdir reports

        rem read the candidate image (if present) so ${IMAGE} resolves
        set "IMAGE="
        if exist build\\prod-candidate.txt (
          for /f %%i in (build\\prod-candidate.txt) do set "IMAGE=%%i"
        )

        pushd deploy
        if defined IMAGE (
          set IMAGE=%IMAGE%
        ) else (
          rem fallback to a dummy so compose still parses
          set IMAGE=flask-shopping-list:latest
        )
        docker compose -p sl_prod -f docker-compose.production.yml ps   > "..\\reports\\prod-ps.txt"   || echo ok
        docker compose -p sl_prod -f docker-compose.production.yml logs > "..\\reports\\prod-logs.txt" || echo ok
        popd
      '''

      // Roll back to last known good (if available)
      bat '''
        setlocal ENABLEDELAYEDEXPANSION
        if exist build\\prod-last-good.txt (
          for /f %%i in (build\\prod-last-good.txt) do set "ROLLBACK=%%i"
          echo Rolling back to !ROLLBACK!

          pushd deploy
          docker compose -p sl_prod -f docker-compose.production.yml down --remove-orphans || echo ok
          set "IMAGE=!ROLLBACK!"
          docker compose -p sl_prod -f docker-compose.production.yml up -d --remove-orphans || echo ok
          popd

          echo Rollback attempted. Check health at http://localhost:5003/health
        ) else (
          echo No last-good image found. Manual intervention required.
        )
      '''
      archiveArtifacts artifacts: 'reports/prod-*.txt', fingerprint: true
    }
  }
}




stage('Monitoring & Alerting (Datadog)') {
  when { expression { currentBuild.currentResult == 'SUCCESS' } }
  steps {
    withCredentials([string(credentialsId: 'Datadog', variable: 'DD_API_KEY')]) {
      script {
        // Launch/refresh the Datadog agent
        bat '''
          echo Starting Datadog monitoring agent...
          docker rm -f dd-agent 2>nul || echo No existing Datadog agent running

          docker run -d --name dd-agent ^
            -e DD_API_KEY=%DD_API_KEY% ^
            -e DD_SITE=ap2.datadoghq.com ^
            -e DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true ^
            -v /var/run/docker.sock:/var/run/docker.sock:ro ^
            -v /proc/:/host/proc/:ro ^
            -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro ^
            -v /var/lib/docker/containers:/var/lib/docker/containers:ro ^
            gcr.io/datadoghq/agent:7

          docker ps -a | findstr dd-agent
        '''

        // ONE-LINE PowerShell health check (no carets, no multiline)
        bat '''
          powershell -NoProfile -Command "$ErrorActionPreference='Stop'; $r=Invoke-WebRequest -Uri 'http://localhost:5003/health' -UseBasicParsing; if ($r.StatusCode -eq 200) { Write-Host ' App is healthy, Datadog agent is monitoring it.'; exit 0 } else { Write-Error '❌ App health check failed.'; exit 1 }"
        '''
      }
    }
  }
  post {
    success { echo ' Datadog Agent running and app is healthy.' }
    failure { echo ' Datadog Monitoring stage failed. See console log.' }
  }
}


    stage('Archive artefacts') {
      steps {
        archiveArtifacts artifacts: 'build/**', fingerprint: true
      }
    }
  }
}
